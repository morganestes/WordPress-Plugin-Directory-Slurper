#!/usr/bin/php
<?php
$args = $argv;
$cmd = array_shift( $args );

$type = 'all';
if ( !empty( $args[0] ) ) {
	$type = $args[0];
}

switch ( $type ) {
	case 'readme':
		$target_directory = 'readmes';
		$download_location = 'readmes/{PLUGIN}.readme';
		$download_url = 'http://plugins.svn.wordpress.org/{PLUGIN}/trunk/readme.txt';
		break;
	case 'all':
		$target_directory = 'plugins';
		$download_location = 'zips/{PLUGIN}.zip';
		$zip_folder = 'zips';
		$download_url = 'http://downloads.wordpress.org/plugin/{PLUGIN}.latest-stable.zip?nostats=1';
		break;
	default:
		echo $cmd . ": invalid command\r\n";
		echo 'Usage: php ' . $cmd . " [command]\r\n\r\n";
		echo "Available commands:\r\n";
		echo "  all - Downloads full plugin zips\r\n";
		echo "  readme - Downloads plugin readmes only\r\n";
		die();
}

echo "Determining most recent SVN revision...\r\n";
try {
	$changelog = @file_get_contents( 'http://plugins.trac.wordpress.org/log/?format=changelog&stop_rev=HEAD' );
	if ( !$changelog )
		throw new Exception( 'Could not fetch the SVN changelog' );
	preg_match( '#\[([0-9]+)\]#', $changelog, $matches );
	if ( !$matches[1] )
		throw new Exception( 'Could not determine most recent revision.' );
} catch ( Exception $e ) {
	die( $e->getMessage() . "\r\n" );
}
$svn_last_revision = (int) $matches[1];
echo "Most recent SVN revision: " . $svn_last_revision . "\r\n";
if ( file_exists( $target_directory . '/.last-revision' ) ) {
	$last_revision = (int) file_get_contents( $target_directory . '/.last-revision' );
	echo "Last synced revision: " . $last_revision . "\r\n";
} else {
	$last_revision = false;
	echo "You have not yet performed a successful sync. Settle in. This will take a while.\r\n";
}

$start_time = time();

if ( $last_revision != $svn_last_revision ) {
	if ( $last_revision ) {
		$changelog_url = sprintf( 'http://plugins.trac.wordpress.org/log/?verbose=on&mode=follow_copy&format=changelog&rev=%d&limit=%d', $svn_last_revision, $svn_last_revision - $last_revision );
		$changes = file_get_contents( $changelog_url );
		preg_match_all( '#^' . "\t" . '*\* ([^/A-Z ]+)[ /].* \((added|modified|deleted|moved|copied)\)' . "\n" . '#m', $changes, $matches );
		$plugins = array_unique( $matches[1] );
	} else {
		$plugins = file_get_contents( 'http://svn.wp-plugins.org/' );
		preg_match_all( '#<li><a href="([^/]+)/">([^/]+)/</a></li>#', $plugins, $matches );
		$plugins = $matches[1];
	}
	// Stash the list in a temporary file,
	// as the list may be too long to store in a bash variable.
	file_put_contents( $target_directory . '/.to_download', implode( "\n", $plugins ) );

	// Take the URL download list and make parallel wget requests.
	$command = 'cat ' . escapeshellarg( $target_directory . '/.to_download' ) . ' | xargs -n 1 -P 12 -I {PLUGIN} wget --quiet -O ' . escapeshellarg( $download_location ) . ' ' . escapeshellarg( $download_url );
	exec( $command );

	if ( $type === 'all' ) {
		// Unzip all zipfiles into the plugins directory.
		exec( 'find ' . $zip_folder . ' -size +0 -name *.zip | xargs -n 1 unzip -o -d plugins' );
		// Remove the lingering zip files.
		exec( 'find ' . $zip_folder . ' -name *.zip | xargs -n 1 rm' );
	}

	// Store the SVN revision number for intelligently updating next time around.
	if ( file_put_contents( $target_directory . '/.last-revision', $svn_last_revision ) )
		echo "[CLEANUP] Updated $target_directory/.last-revision to " . $svn_last_revision . "\r\n";
	else
		echo "[ERROR] Could not update $target_directory/.last-revision to " . $svn_last_revision . "\r\n";
}

$end_time = time();
$minutes = ( $end_time - $start_time ) / 60;
$seconds = ( $end_time - $start_time ) % 60;

echo "[SUCCESS] Done updating plugins!\r\n";
echo "It took " . number_format($minutes) . " minute" . ( $minutes == 1 ? '' : 's' ) . " and " . $seconds . " second" . ( $seconds == 1 ? '' : 's' ) . " to update ". count($plugins)  ." plugin" . ( count($plugins) == 1 ? '' : 's') . "\r\n";
echo "[DONE]\r\n";
